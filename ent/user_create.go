// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assos/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (uc *UserCreate) SetKey(s string) *UserCreate {
	uc.mutation.SetKey(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetEmailVerifiedAt sets the "email_verified_at" field.
func (uc *UserCreate) SetEmailVerifiedAt(i int64) *UserCreate {
	uc.mutation.SetEmailVerifiedAt(i)
	return uc
}

// SetNillableEmailVerifiedAt sets the "email_verified_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailVerifiedAt(i *int64) *UserCreate {
	if i != nil {
		uc.SetEmailVerifiedAt(*i)
	}
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetSignupMethods sets the "signup_methods" field.
func (uc *UserCreate) SetSignupMethods(s string) *UserCreate {
	uc.mutation.SetSignupMethods(s)
	return uc
}

// SetNillableSignupMethods sets the "signup_methods" field if the given value is not nil.
func (uc *UserCreate) SetNillableSignupMethods(s *string) *UserCreate {
	if s != nil {
		uc.SetSignupMethods(*s)
	}
	return uc
}

// SetGivenName sets the "given_name" field.
func (uc *UserCreate) SetGivenName(s string) *UserCreate {
	uc.mutation.SetGivenName(s)
	return uc
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableGivenName(s *string) *UserCreate {
	if s != nil {
		uc.SetGivenName(*s)
	}
	return uc
}

// SetFamilyName sets the "family_name" field.
func (uc *UserCreate) SetFamilyName(s string) *UserCreate {
	uc.mutation.SetFamilyName(s)
	return uc
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableFamilyName(s *string) *UserCreate {
	if s != nil {
		uc.SetFamilyName(*s)
	}
	return uc
}

// SetMiddleName sets the "middle_name" field.
func (uc *UserCreate) SetMiddleName(s string) *UserCreate {
	uc.mutation.SetMiddleName(s)
	return uc
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableMiddleName(s *string) *UserCreate {
	if s != nil {
		uc.SetMiddleName(*s)
	}
	return uc
}

// SetNickname sets the "nickname" field.
func (uc *UserCreate) SetNickname(s string) *UserCreate {
	uc.mutation.SetNickname(s)
	return uc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uc *UserCreate) SetNillableNickname(s *string) *UserCreate {
	if s != nil {
		uc.SetNickname(*s)
	}
	return uc
}

// SetGender sets the "gender" field.
func (uc *UserCreate) SetGender(s string) *UserCreate {
	uc.mutation.SetGender(s)
	return uc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uc *UserCreate) SetNillableGender(s *string) *UserCreate {
	if s != nil {
		uc.SetGender(*s)
	}
	return uc
}

// SetBirthdate sets the "birthdate" field.
func (uc *UserCreate) SetBirthdate(s string) *UserCreate {
	uc.mutation.SetBirthdate(s)
	return uc
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (uc *UserCreate) SetNillableBirthdate(s *string) *UserCreate {
	if s != nil {
		uc.SetBirthdate(*s)
	}
	return uc
}

// SetPhoneNumber sets the "phone_number" field.
func (uc *UserCreate) SetPhoneNumber(s string) *UserCreate {
	uc.mutation.SetPhoneNumber(s)
	return uc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneNumber(s *string) *UserCreate {
	if s != nil {
		uc.SetPhoneNumber(*s)
	}
	return uc
}

// SetPhoneNumberVerifiedAt sets the "phone_number_verified_at" field.
func (uc *UserCreate) SetPhoneNumberVerifiedAt(i int64) *UserCreate {
	uc.mutation.SetPhoneNumberVerifiedAt(i)
	return uc
}

// SetNillablePhoneNumberVerifiedAt sets the "phone_number_verified_at" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneNumberVerifiedAt(i *int64) *UserCreate {
	if i != nil {
		uc.SetPhoneNumberVerifiedAt(*i)
	}
	return uc
}

// SetPicture sets the "picture" field.
func (uc *UserCreate) SetPicture(s string) *UserCreate {
	uc.mutation.SetPicture(s)
	return uc
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uc *UserCreate) SetNillablePicture(s *string) *UserCreate {
	if s != nil {
		uc.SetPicture(*s)
	}
	return uc
}

// SetRoles sets the "roles" field.
func (uc *UserCreate) SetRoles(s string) *UserCreate {
	uc.mutation.SetRoles(s)
	return uc
}

// SetRevokedTimestamp sets the "revoked_timestamp" field.
func (uc *UserCreate) SetRevokedTimestamp(i int64) *UserCreate {
	uc.mutation.SetRevokedTimestamp(i)
	return uc
}

// SetNillableRevokedTimestamp sets the "revoked_timestamp" field if the given value is not nil.
func (uc *UserCreate) SetNillableRevokedTimestamp(i *int64) *UserCreate {
	if i != nil {
		uc.SetRevokedTimestamp(*i)
	}
	return uc
}

// SetIsMultiFactorAuthEnabled sets the "is_multi_factor_auth_enabled" field.
func (uc *UserCreate) SetIsMultiFactorAuthEnabled(b bool) *UserCreate {
	uc.mutation.SetIsMultiFactorAuthEnabled(b)
	return uc
}

// SetNillableIsMultiFactorAuthEnabled sets the "is_multi_factor_auth_enabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsMultiFactorAuthEnabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsMultiFactorAuthEnabled(*b)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(i int64) *UserCreate {
	uc.mutation.SetUpdatedAt(i)
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(i int64) *UserCreate {
	uc.mutation.SetCreatedAt(i)
	return uc
}

// SetAppData sets the "app_data" field.
func (uc *UserCreate) SetAppData(s string) *UserCreate {
	uc.mutation.SetAppData(s)
	return uc
}

// SetNillableAppData sets the "app_data" field if the given value is not nil.
func (uc *UserCreate) SetNillableAppData(s *string) *UserCreate {
	if s != nil {
		uc.SetAppData(*s)
	}
	return uc
}

// SetTenantOwner sets the "tenant_owner" field.
func (uc *UserCreate) SetTenantOwner(b bool) *UserCreate {
	uc.mutation.SetTenantOwner(b)
	return uc
}

// SetNillableTenantOwner sets the "tenant_owner" field if the given value is not nil.
func (uc *UserCreate) SetNillableTenantOwner(b *bool) *UserCreate {
	if b != nil {
		uc.SetTenantOwner(*b)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(s string) *UserCreate {
	uc.mutation.SetID(s)
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.TenantOwner(); !ok {
		v := user.DefaultTenantOwner
		uc.mutation.SetTenantOwner(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "User.key"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.Roles(); !ok {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required field "User.roles"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.TenantOwner(); !ok {
		return &ValidationError{Name: "tenant_owner", err: errors.New(`ent: missing required field "User.tenant_owner"`)}
	}
	if v, ok := uc.mutation.ID(); ok {
		if err := user.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "User.id": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected User.ID type: %T", _spec.ID.Value)
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.Key(); ok {
		_spec.SetField(user.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.EmailVerifiedAt(); ok {
		_spec.SetField(user.FieldEmailVerifiedAt, field.TypeInt64, value)
		_node.EmailVerifiedAt = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.SignupMethods(); ok {
		_spec.SetField(user.FieldSignupMethods, field.TypeString, value)
		_node.SignupMethods = value
	}
	if value, ok := uc.mutation.GivenName(); ok {
		_spec.SetField(user.FieldGivenName, field.TypeString, value)
		_node.GivenName = value
	}
	if value, ok := uc.mutation.FamilyName(); ok {
		_spec.SetField(user.FieldFamilyName, field.TypeString, value)
		_node.FamilyName = value
	}
	if value, ok := uc.mutation.MiddleName(); ok {
		_spec.SetField(user.FieldMiddleName, field.TypeString, value)
		_node.MiddleName = value
	}
	if value, ok := uc.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := uc.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := uc.mutation.Birthdate(); ok {
		_spec.SetField(user.FieldBirthdate, field.TypeString, value)
		_node.Birthdate = value
	}
	if value, ok := uc.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := uc.mutation.PhoneNumberVerifiedAt(); ok {
		_spec.SetField(user.FieldPhoneNumberVerifiedAt, field.TypeInt64, value)
		_node.PhoneNumberVerifiedAt = value
	}
	if value, ok := uc.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
		_node.Picture = value
	}
	if value, ok := uc.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeString, value)
		_node.Roles = value
	}
	if value, ok := uc.mutation.RevokedTimestamp(); ok {
		_spec.SetField(user.FieldRevokedTimestamp, field.TypeInt64, value)
		_node.RevokedTimestamp = value
	}
	if value, ok := uc.mutation.IsMultiFactorAuthEnabled(); ok {
		_spec.SetField(user.FieldIsMultiFactorAuthEnabled, field.TypeBool, value)
		_node.IsMultiFactorAuthEnabled = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.AppData(); ok {
		_spec.SetField(user.FieldAppData, field.TypeString, value)
		_node.AppData = value
	}
	if value, ok := uc.mutation.TenantOwner(); ok {
		_spec.SetField(user.FieldTenantOwner, field.TypeBool, value)
		_node.TenantOwner = &value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
